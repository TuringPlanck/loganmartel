// Generated by CoffeeScript 1.9.3
(function() {
  var Terminal, terminal;

  Terminal = (function() {
    var command_line;

    function Terminal(target, PS1, welcome, guide, commands, broadcasts) {
      var command, hidden_commands, history, i, index, instance, len, ref;
      this.target = target != null ? target : ".shell .text";
      this.PS1 = PS1 != null ? PS1 : "$ ";
      this.welcome = welcome != null ? welcome : "./hello_friend";
      this.guide = guide != null ? guide : "Run 'help' for basic commands";
      this.commands = commands != null ? commands : ["about", "projects", "skills", "resume"];
      this.broadcasts = broadcasts != null ? broadcasts : ["about", "projects", "skills", "resume"];
      instance = this;
      history = [];
      index = history.length;
      hidden_commands = ["help", "clear"];
      ref = this.broadcasts;
      for (i = 0, len = ref.length; i < len; i++) {
        command = ref[i];
        instance[command] = function() {
          return instance["broadcast"](command);
        };
      }
      $(document).keydown(function(e) {
        if (e.which === 76 && e.ctrlKey) {
          e.preventDefault();
          instance.clear();
          return instance.newline();
        }
      });
      $(document).keydown(function(e) {
        var code, input;
        code = e.which;
        if (code === 38 || code === 40) {
          e.preventDefault();
          input = $('input#command').last();
          if (code === 38 && index - 1 >= 0) {
            index--;
          }
          if (code === 40 && index + 1 <= history.length) {
            index++;
          }
          console.log(index);
          if ((0 <= index && index < history.length)) {
            return input.val(history[index]);
          } else {
            return input.val('');
          }
        }
      });
      $(document).keydown(function(e) {
        var input, j, k, len1, len2, option, options, results, results1, str;
        if (e.which === 9) {
          e.preventDefault();
          input = $('input#command').last();
          str = input.val();
          options = hidden_commands.concat(instance.commands);
          results = [];
          for (j = 0, len1 = options.length; j < len1; j++) {
            command = options[j];
            if (command.substr(0, str.length) === str) {
              results.push(command);
            }
          }
          if (results.length === 0) {

          } else if (results.length === 1) {
            return input.val(results[0]);
          }
          instance.print("<br>");
          results1 = [];
          for (k = 0, len2 = results.length; k < len2; k++) {
            option = results[k];
            instance.print(option + "<br>");
            results1.push(instance.newline);
          }
          return results1;
        }
      });
      $(document.body).on('keyup', 'input#command', function(e) {
        if (e.which === 13) {
          $(this).blur();
          $(this).prop('readonly', true);
          command = $(this).val();
          command = command.toLowerCase();
          instance.print("<br>");
          try {
            if (command === "init" || command === "newline") {
              throw "no h4x0rs allowed!";
            }
            instance["" + command]();
            history.push(command);
            return index = history.length;
          } catch (_error) {
            e = _error;
            console.log(e);
            return instance.print("command unavailable");
          } finally {
            setTimeout((function() {
              return instance.newline();
            }), 200);
          }
        }
      });
    }

    command_line = '<input type="text" id="command" value="">';

    Terminal.prototype.init = function() {
      return this.greet(this.welcome, 0, 100);
    };

    Terminal.prototype.print = function(element) {
      var $target;
      $target = $(this.target);
      return $target.append(element);
    };

    Terminal.prototype.newline = function() {
      this.print("<br> " + this.PS1);
      this.print(command_line);
      return $("input#command").last().focus();
    };

    Terminal.prototype.greet = function(message, index, interval) {
      if (index < message.length) {
        this.print(message[index++]);
        return setTimeout(((function(_this) {
          return function() {
            return _this.greet(message, index, interval);
          };
        })(this)), interval);
      } else {
        this.broadcast("go");
        return $(document).on("done", (function(_this) {
          return function() {
            _this.print("<br> " + _this.guide);
            return _this.newline();
          };
        })(this));
      }
    };

    Terminal.prototype.help = function() {
      var command, i, len, ref, results1;
      ref = this.commands;
      results1 = [];
      for (i = 0, len = ref.length; i < len; i++) {
        command = ref[i];
        results1.push(this.print(command + "<br>"));
      }
      return results1;
    };

    Terminal.prototype.broadcast = function(event) {
      return $(document).trigger(event);
    };

    Terminal.prototype.clear = function() {
      return $(this.target).empty();
    };

    return Terminal;

  })();

  terminal = new Terminal();

  terminal.init();

}).call(this);
